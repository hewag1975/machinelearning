---
title: "Untitled"
format: html
editor: source
editor_options: 
  chunk_output_type: console
---

## Machine Learning

Field of study that gives computers the ability to learn without being 
explicitly programmed. - *Arthur Samuel (1959)*


### Unsupervised learning
 
* clustering
* anomaly detection
* dimensionality reduction


### Supervised learning

* regression (model, cost function)
* gradient descent


#### Gradient descent

* random starting parameters
* select cost function (e.g. MSE, RMSE, ...)
* change parameters to reduce cost function $J$ to possible (local) minimum
* example of gradient descent for cost function $J(w, b)$:
  * for parameter $w$: $w=w-\alpha\frac{\partial}{\partial w}J(w, b)$ 
  * for parameter $b$: $B=b-\alpha\frac{\partial}{\partial b}J(w, b)$
  * with $\alpha$: learning rate, e.g. 0.01, corresponds to the step size
  * derivative indicates direction and grade of descent per parameter
  * in case of one parameter, partial derivative is tangent line
  * in case of two parameters, partial derivatives form a 2D-plane 
* parameters are updated simultaneously
* near local minimum update steps get smaller by design, even with constant 
learning rate $\alpha$
* repeat until convergence, i.e. changes get smaller per step
* small leaning rate leads to slow descent (many steps)
* large leaning rate may miss the minimum and fail to converge
* stopping criteria:
  * derivative of cost function is close to zero
  * small changes of parameters 
  
Example with linear regression:

* partial derivatives
* always one global minimum
* in linear regression **batch** gradient descent is used which uses the entire 
training data at each step


## Python snippets

* plotting

```{python}
#| label: plot-numpy
import numpy as np
import matplotlib.pyplot as plt

x = np.array([3, 200])
y = np.array([200, 500])

plt.scatter(x, y=y, label='sample')
plt.xlabel('size')
plt.ylabel('price')
plt.legend()
plt.show()
```

* vectorization

```{python}
import numpy as np

b = 1
w = np.array([2, 3, 4])
x = np.array([10, 20, 30])

f = 0
for j in range(len(w)):
  f = f + w[j] * x[j]

f + b

np.dot(w, x) + b
```


* compute cost function

```{python}
def compute_cost(x, y, w, b):
    m = x.shape[0] 
    cost = 0
    
    for i in range(m):
        f_wb = w * x[i] + b
        cost = cost + (f_wb - y[i])**2
        
    total_cost = 1 / (2 * m) * cost

    return total_cost
```

* compute gradient function

```{python}
def compute_gradient(x, y, w, b): 
    """
    Computes the gradient for linear regression 
    Args:
      x (ndarray (m,)): Data, m examples 
      y (ndarray (m,)): target values
      w,b (scalar)    : model parameters  
    Returns
      dj_dw (scalar): The gradient of the cost w.r.t. the parameters w
      dj_db (scalar): The gradient of the cost w.r.t. the parameter b     
     """
    
    # Number of training examples
    m = x.shape[0]    
    dj_dw = 0
    dj_db = 0
    
    for i in range(m):  
        f_wb = w * x[i] + b 
        dj_dw_i = (f_wb - y[i]) * x[i] 
        dj_db_i = f_wb - y[i] 
        dj_db += dj_db_i
        dj_dw += dj_dw_i 
        
    dj_dw = dj_dw / m 
    dj_db = dj_db / m 
        
    return dj_dw, dj_db
```

* gradient descent function

```{python}
def gradient_descent(x, y, w_in, b_in, alpha, num_iters, cost_function, gradient_function): 
    """
    Performs gradient descent to fit w,b. Updates w,b by taking 
    num_iters gradient steps with learning rate alpha
    
    Args:
      x (ndarray (m,))  : Data, m examples 
      y (ndarray (m,))  : target values
      w_in,b_in (scalar): initial values of model parameters  
      alpha (float):     Learning rate
      num_iters (int):   number of iterations to run gradient descent
      cost_function:     function to call to produce cost
      gradient_function: function to call to produce gradient
      
    Returns:
      w (scalar): Updated value of parameter after running gradient descent
      b (scalar): Updated value of parameter after running gradient descent
      J_history (List): History of cost values
      p_history (list): History of parameters [w,b] 
      """
    
    # An array to store cost J and w's at each iteration primarily for graphing later
    J_history = []
    p_history = []
    b = b_in
    w = w_in
    
    for i in range(num_iters):
        # Calculate the gradient and update the parameters using gradient_function
        dj_dw, dj_db = gradient_function(x, y, w , b)     

        # Update Parameters using equation (3) above
        b = b - alpha * dj_db                            
        w = w - alpha * dj_dw                            

        # Save cost J at each iteration
        if i<100000:      # prevent resource exhaustion 
            J_history.append(cost_function(x, y, w , b))
            p_history.append([w,b])
        # Print cost every at intervals 10 times or as many iterations if < 10
        if i% math.ceil(num_iters/10) == 0:
            print(f"Iteration {i:4}: Cost {J_history[-1]:0.2e} ",
                  f"dj_dw: {dj_dw: 0.3e}, dj_db: {dj_db: 0.3e}  ",
                  f"w: {w: 0.3e}, b:{b: 0.5e}")
 
    return w, b, J_history, p_history # return w and J,w history for graphing
```


