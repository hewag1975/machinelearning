---
title: "Handwritten digits recognition"
subtitle: "Logistic regression example"
author: Hendrik Wagenseil
format: 
  html:
    code-fold: true
editor: source
editor_options: 
  chunk_output_type: console
---


```{python}
#| label: setup

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_digits 
from sklearn.model_selection import train_test_split 

digits = load_digits()
# digits.keys()
print(digits.DESCR)
```


```{python}
#| label: data

X = digits.data
y = digits.target

print("The shpae of X is: ", X.shape)
print("The first element of X is: ", X[0])
print("The first element of y is: ", y[0])
```


```{python}
#| label: plt-digits

def plt_digits(i):
    '''Plots 16 digits, starting with digit i'''
    nplots = 25
    fig = plt.figure(figsize = (5, 5))
    for j in range(nplots):
        plt.subplot(5, 5, j + 1)
        plt.imshow(digits.images[i + j], cmap = 'binary', interpolation = 'nearest')
        plt.title(digits.target[i + j])
        plt.axis('off')
    plt.show()

plt_digits(0)    
```

```{python}
#| eval: false

m, n = X.shape

fig, axes = plt.subplots(8,8, figsize=(5,5))
fig.tight_layout(pad=0.13,rect=[0, 0.03, 1, 0.91]) #[left, bottom, right, top]

#fig.tight_layout(pad=0.5)
widgvis(fig)
for i,ax in enumerate(axes.flat):
    # Select random indices
    random_index = np.random.randint(m)
    
    # Select rows corresponding to the random indices and
    # reshape the image
    X_random_reshaped = X[random_index].reshape((20,20)).T
    
    # Display the image
    ax.imshow(X_random_reshaped, cmap='gray')
    
    # Display the label above the image
    ax.set_title(y[random_index,0])
    ax.set_axis_off()
    fig.suptitle("Label, image", fontsize=14)
```



```{python}
#| label: train-test-split

X_train, X_test, y_train, y_test = train_test_split(
  X
  , y
  , test_size = 0.3
  , random_state = 123
  , stratify = y
  )

print("Dimensions of training data: ", X_train.shape)
print("Dimensions of test data: ", X_test.shape)
```



```{python}
#| eval: false

z = np.array([1., 2., 3., 4.])
z.shape
sum(np.exp(z) / sum(np.exp(z)))

def my_softmax(z):  
    """ Softmax converts a vector of values to a probability distribution.
    Args:
      z (ndarray (N,))  : input data, N features
    Returns:
      a (ndarray (N,))  : softmax of z
    """    
    ### START CODE HERE ### 
    a = np.exp(z) / sum(np.exp(z))
    ### END CODE HERE ### 
    return a
  
my_softmax(z)

```


